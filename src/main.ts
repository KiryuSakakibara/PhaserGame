// THE MAIN ENTRY FILE FOR ELECTRON APPLICATION
import { app, BrowserWindow } from 'electron';
import steamworks from "steamworks.js"
require("@electron/remote/main").initialize()

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const useSteam = true
let client: Omit<typeof import("steamworks.js/client"), "init" | "runCallbacks"> | undefined
if (useSteam) {
    try {
        //const steamworks = require("steamworks.js");
        //console.log("steamworks, ", steamworks);
        client = steamworks.init(2618510);

        //console.log("client", client);
        //console.log(client.localplayer.getName());
        
    } catch (e) {
        console.log(e)
    }
  
}
steamworks.electronEnableSteamOverlay()

declare global {
    var steamClient: Omit<typeof import("steamworks.js/client"), "init" | "runCallbacks"> | undefined
}
globalThis.steamClient = client

if (require('electron-squirrel-startup')) {
    app.quit();
}

const createWindow = (): void => {
    const win = new BrowserWindow({
        width: 960,
        height: 540,
        webPreferences: {
            nodeIntegration: true,
            contextIsolation: false,
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
        },
        useContentSize: true,
        backgroundColor: "#000000",
    })
    win.setMenuBarVisibility(false)
    win.maximize()
    require("@electron/remote/main").enable(win.webContents)
    
    win.webContents.openDevTools()
    win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});